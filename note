스프링 클라우드 note

Section 1 Service Discovery

Service Discovery
- 외부의 다른 서비스들이 등록된 마이크로서비스를 사용하기 위함
- 일종의 전화번호부의 개념
- key-value쌍을 저장
  (서비스-위치)
- 이를 위한 등록, 검색 기능을 제공
- 서비스 클라이언트가 서비스 서버에 등록된 다른 서비스를 호출할 때
  서비스의 위치(IP, 포트)를 알아낼 수 있는 기능 제공

설정
- Springboot : 2.4.2
- SpringCloud: 2020.0.0

Eureka
- 마이크로서비스들의 정보를 레지스트리에 등록
- 마이크로서비스의 탐색과 로드벨런싱 기능을 제공
- Eureka Server에 등록되는 마이크로서비스를 Eureka Client라
  한다.
- Eureka Server는 등록된 Eureka Client의 상태 정보가 
  등록된 레지스트리를 갖는다.
- Eureka Client는 Eureka Server에게 자신의 상태를 알리기 위해
  30초마다 신호를 보낸다.
  - 서버는 90초 이상 신호를 받지 못한 인스턴스를 삭제한다.
  - 클라이언트는 서버로부터 서비스 등록정보를 가져와 로컬캐시에 저장하여
    다른 서비스를 호출하는데 사용한다.

Eureka Server 설정
1. Eureka Server포트 설정
2. Client설정 (자기 자신 클라이언트로 등록하지 않도록)
  register-with-eureka: false
  fetch-registry: false
3. Springboot main에 @EnableEurekaServer추가  

예제 마이크로서비스 생성
프로젝트 이름: user-service
의존성
  - Eureka Discovery Client
  - Lombok
  - DevTools
  - Spring Web

Eureka Client 설정
1. Springboot main에 @EnableEurekaClient추가
2. yml파일 설정
  1. 서버의 포트번호 설정
    server.port: 9001
  2. 마이크로서비스 이름 설정
    spring.applicaiton.name: user-service
  3. eureka.client
   	   register-with-eureka: true
   	   fetch-registry: true
   	   service-url: 
   	     defaultZone: http://localhost:8761/eureka    

Eureka Client 구동방법 1
- springbook main 실행

Eureka Client 구동방법 2
1. RunDebug Configurations 설정
2. 기존 User-Service Copy
3. 포트 설정
  3-1 Environment-VM options
  3-2 -Dserver.port=9002
=> 서버 자체의 코드를 변경하는 것이 아님
   빌드, 패키징, 재배포 등의 과정이 필요없음  

Eureka Client 구동방법 3
Maven명령어로 실행
- mvn spring-boot:run -Dspring-boot.run.jvmArguments='-Dserver.port=9003'

Eureka Client 구동방법 4
컴파일 후 jar파일 실행
0. mvn clean : 이전 빌드삭제
  - target폴더가 삭제됨
1. mvn compile package
  - target폴더가 생성됨
2. jar파일 실행
  java -jar -Dserver.port=9004 ./target/user_service-0.0.1-SNAPSHOT.jar
==> mvn clean compile package : 클린 후 컴파일,패키징  

- 4가지 구동방법으로 4개 Eureka Client를 Eureka Server에 등록시켜봤음
- but, 매번 포트를 변경하여 실행하는 것이 매우 번거로움 ..
==> 스프링부트의 랜덤포트 기능을 사용해보자.

Random Port
0. yml파일 수정
1. port를 0으로 설정 (=랜덤 포트를 사용하겠다.)
   - 기존에 설정하였던 RunDebug Configuration 설정을 초기화해주어야 함 (삭제)
2. 인텔리제이에서 한 개 클라이언트를 실행
3. 터미널에서 한 개 클라이언트를 실행 총 2개를 실행시켜보자.
    mvn spring-boot:run     (따로 포트설정 필요 없음)   
- 랜덤포트로 설정 후 두 개 클라이언트를 구동하면 서버에 두 개 클라이언트가
  등록되어야 하는데 한 개 클라이언트만 등록된다.
  => Eureka서버에서 동적으로 부여된 포트를 가져오지 않고 yml에 설정된 포트0번을
     그대로 사용하기 때문이다.
- Eureka Service의 yml파일을 수정해주어야 한다.
  eureka.instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}

정리
1. User-service를 실행할 때마다 자동으로 포트가 부여되도록 하였다.  
2. 사용자가 인식할 수 없는 상태에서 여러 개 인스턴스가 생성된다.
3. 생성된 각각의 서비스(인스턴스)는 Eureka Service에 등록되어 라우팅 서비스와
   게이트웨이에 의해 필요한 작업을 호출할 수 있는 상태가 되었다. (=부하분산)   
===============================================
Section 2 API Gateway Service

API Gateway Service
- 사용자가 설정한 라우팅 설정에 따라 클라이언트 대신 엔트 포인트로 요청
- 응답을 받으면 클라이언트에게 전달
- 일종의 프록시 역할
- 시스템 내부 구조는 숨기고 외부 요청에 대해 적절히 가공하여 응답
- 클라이언트 사이드에서 단일 진입점을 제공
- MSA 검색 및 통합 기능 제공
- 부하 분산 기능 제공
- 단일 진입점이므로 보다 쉬운 로깅 및 추적 가능

Spring Cloud에서의 MSA간 통신
1. RestTemplate
2. Feign Client
  - 인터페이스를 구성
  - @FeignCLient("호출하고자 하는 MSA이름")
  - RestTeamplate처럼 직접 서버주소, 포트번호 등을 지정하지 않아도 됨
  - 호출하고자 하는 MSA의 API를 자신의 API처럼 호출 가능하다.

Netflix Ribbon
- Client side Load Balancer (클라이언트 측 로드밸런싱)
- 비동기 처리가 잘 되지 않아 최근 잘 사용하지 않음.
- 클라이언트 내에서 MSA의 이름으로 서비스 호출 가능
- Health Check

Netflix Zuul
- API Gateway의 역할
- 2.4에서 Maintenance상태이므로 Spring Cloud Gateway로 대체 사용
  - 혹은 스프링부트 버전을 낮춰서 사용

Zuul 실습환경 설정
- Springboot 2.3.x
- First Service, Second Service 두 개 서비스 생성
  Lombok, Spring Web, Eureka discovery Client
- First Service
  - port: 8081
  - spring.application.name: my-first-service
  - Eureka Client false      
- Second Service
  - port: 8082
  - spirng.application.name: my-second-service
  - Eureka Client false      
- Zuul Service
  - Lombok, Spring Web, Spring Cloud Routing(Zuul)
  - @EnableZuulProxy
  - 포트번호 : 8000


Zuul Service 라우팅
- zuul.routes:
  first-service:
    path: /first-service/**
    url: http://localhost:8081
  secnod-service:
    path: /second-service/**
    url: http://localhost:8082  
- http://localhost:8000/first-service/welcome 접근
   => first-service의 welcome호출 

Zuul Service 필터링
- 로그를 출력하는 필터
- ZuulFilter를 상속받는 클래스를 컴포넌트(빈)로 생성/등록
- ZuulFilter추상클래스 메서드 오버라이딩
  filterType: 사전,사후 필터 결정 - "pre", "post"
  filterOrder: 여러 개 필터에 대한 순서
  shouldFilter: true/false 필터 사용 여부
  run: 실제 동작을 구현
- Logger객체 사용 slf4j의 LoggerFactory구현체 사용
  logger = LoggerFactory.getLogger(ZuulLoggingFilter.class);  
  or @Slf4j (Lombok제공)
- Logger레벨
  - Info, Debug, Warn, Error
- run메서드 오버라이딩 (Request정보 로그)
log.info("************ printing logs: ");
RequestContext rctx = RequestContext.getCurrentContext();
HttpServletRequest request = rctx.getReqeust();
log.info("************ printing logs: "+ request.getRequestURI());

Spring Cloud Gateway Routing
- api-gateway-service
- springboot 2.4.x
- Lombok, SpringCloudRouting(Gateway), Eureka Client
- yml 설정
  server.port: 8000
  eureka.client 설정
  spring.application.name: apigateway-service
  spring.cloud.gateway.routes:
    - id: first-service
      uri: http://localhost:8081/
      predicates: 
        - Path=/first-service/**
    - id: second-service
      uri: http://localhost:8082/
      predicates:
        - Path=/second-service/**
- Zuul과 설정을 달리 해주어야 하느 것
  설정한 path가 uri에 그대로 붙음
  http://localhost:8081/first-service/** 요런식
  매핑정보를 바꿔줘야 함        
- Netty 비동기 내장 서버가 구동됨을 확인 (tomcat X)                

Spring Cloud Gateway Filter (JAVA Code로 구현)
- @Configuration @Bean 설정파일을 빈으로 등록
- RouterLocater를 Bean으로 등록할 것
- RouterLocaterBuilder를 받아 값 세팅
  builder.routes
       .route().filter().url()
  .build();    
- 필터링 테스트
  1. 각각의 서비스를 라우팅 처리한 후 필터를 통해 Request헤더, Response헤더
     추가
  2. 로그로 추가된 헤더를 확인해보자.
  3. 헤더가 추가된 것이 확인된다면 서비스 요청시 Gateway에서 라우팅처리 되고
     필터를 통해 어떤 처리가 이루어진 것.

Spring Cloud Gateway Filter (yml에 작성)
spring.cloud.gateway:
  filters:
    - AddRequestHeader=key,value
    - AddResponseHeader=key,value
- 두 개 이상 커스텀 필터 적용시 filters: 에서 name으로 식별해주어야 함
  filters:
    - name: FilterClass1
      args: 
        ...
    - name: FilgerClass2
      args:
        ...    

Spring Cloud Geateway Custom Filter1
- CustomFilter를 컴포넌트로 등록 후 yml에서 Filter로 등록
1. CustomFilter 클래스 작성
  1. AbstractGatewayFilterFactory<CustomFilter.Config> 상속    
  2. 기본생성자, Config클래스 등록
  3. apply메서드 구현
  4. apply메서드는 exchange와 chain을 매개변수로 받음
     람다로 구현
     4-1 exchange에서 req, res 등 정보를 받아올 수 있음
  5. pre필터 후 chain을 통해 post필터가 동작되도록 함

Spring Cloud Geateway Global Filter
- 모든 라우팅 정보에 대해 필터를 수행
- Custom Filter 클래스를 구성할 때와 동일한 방식
- Config클래스를 만들어 필터 구동시 멤버 초기화 가능
- Custom필터와 함께 사용하는 경우
  - Global Pre Filter가 가장 먼저 수행
  - Custom Pre, Post Filter 순서대로 수행
  - 마지막으로 Global Post Filter 수행
- yml 설정
  spring.cloud.gateway:
    default-filters:
      - name: FilterClassName
        args:
          ...
          ...
          ...

Custom Filter 우선순위 조정
- GatewayFilter를 OrderedGatewayFilter로 구현
- 매개변수는 동일 (exchange, chain)
- OrderedGatewayFilter의 생성자 두 번째 매개변수로 우선순위 전달
  Ordered.LOWEST_PRECEDENCE
  Ordered.HIGHEST_PRECEDENCE   

Spring Cloud Gateway Eureka 연동
1. API Gateway의 포트로 요청이 들어옴
2. API Gateway는 Eureka서버에서 해당 MSA를 discovery
3. 해당하는 MSA는 API Gateway로 응답
- API Gateway에서 라우팅 url을 찾을 때 직접 해당 uri를 찾는 것이
  아니고 Ureka에 등록된 인스턴스 이름으로 찾음
  lb://MY-FIRST-SERVICE
  lb://MY-SECOND-SERVICE

Routing + Load Balancer 테스트
1. 랜덤 포트 설정 
2. Eureka 서버 구동
3. API Gateway 서비스 구동
4. 두 개 이상 서비스 구동 (등록)
=> 반복해서 요청시 라운드로빈 방식으로 부하분산처리 되는 것을 확인 가능
  - LB방식은 라운드로빈, 랜덤 방식을 지원
===============================================

Section3 E-commerse 애플리케이션

1. Registry Service (Eureka Server) 구축
2. 3개 서비스를 만들고 Eureka Server에 등록
  - catalog service
  - user service
  - order service
3. 서비스 간 데이터를 주고받기 위해 메시지 큐잉 서버 사용
  - kafka 사용
4. 라우팅 및 부하 분산
  - API Gateway service

마이크로서비스 API 
1. catalog service
  /catalog-service/catalogs : 상품 목록
2. user service
  /user-service/users : 사용자 정보 등록 (POST)
  /user-service/users : 전체 사용자 조회 (GET)
  / user-service/users/{user_id} : 사용자 정보 ,주문 내역 조회    
3. order service
  /order-service/users/{user_id}/orders
  POST(주문등록), GET (주문확인)
===============================================
Users Microservice

API Gateway 사용시 URI
사용자 등록: /user-service/users
전체 사용자 조회: /user-service/users
사용자 정보, 주문내역 조회: /user-service/users/{user_id}
작동 상태 확인: /user-service/users/health_check
웰컴 메시지: /users-service/users/welcome
  ==> URI에 MSA의 이름을 prefix로 명시해주어야 함

프로젝트 설정
- Springboot: 2.4.x
- h2: 1.3.176
- DevTools, Lombok, Eureka Discovery Client
  spring web, h2, JPA
- 랜덤포트 사용

참고
1. 설정파일(.yml)에 정의된 갑 가져오는 방법 2개
  1-1 Environment객체 사용
    - Environment객체 DI
    - env.getProperty("parent.child");
  1-2 @Value 사용
    - 설정파일의 값을 클래스로 정의
    - 정의된 클래스를 컴포넌트 스캔을 통해 빈으로 등록
    - @Value("${parent.child}")
    - 사용하는 곳에서 정의한 빈 DI받아 사용

Spring security
1. spring security 의존성 추가
2. WebSecurityConfigurerAdapter를 상속받는 클래스 정의
3. configure메서드 재정의
  - 인가범위 설정
4. BCrpytPasswordEncoder 빈등록 및 패스워드 해시화

User-service Login
uri: /user-service/login
1. AuthenticationFilter 정의
  - UsernamePasswordAuthenticationFilter를 상속
  - 두 개 메서드 오버라이딩
    1. attemptAuthentication
      - request를 LoginVO로 변환 (ObjectMapper.readValue)
      - UsernamePasswordAuthenticationToken 생성
      - 생성된 토큰을 AuthenticationManager과 관리하도록 넘겨줌
        getAuthenticationManager().authenticate
    2. successfulAuthentication
2. WebSecurity 설정 - 1 (Authorization)
  - IP 제한 설정 (선택)
  - 정의한 Filter클래스 필터로 추가
  - 필터 추가를 위한 메서드 정의
    리턴: AuthenticationFilter    
    필터를 생성하고 authenticationManager를 설정
3. WebSecurity 설정 - 2 (Authentication)    
  - AuthenticationManagerBuilder를 매개변수로하는 configure메서드
  - 패스워드에 해당하는 이메일을 찾기 위해 UserService빈 필요
  - 암호화된 패스워드와 비교를 위해 암호화 모듈 빈 필요
  - UserService인터페이스에서 UserDetailService를 상속
  - UserService구현체에서 loadUserByUsername 구현
    1. 레포지토리에서 username에 해당하는 엔티티를 찾음
    2. 엔티티 널처리 (예외처리)
    3. Spring의 User객체 생성 및 리턴
===============================================
spring cloud config
- 서버와 클라이언트 구성에 대한 설정정보를 외부에서 관리하도록 함
- 서비스를 다시 빌드하지 않고 적용 가능
- 개발환경에 따라 유연한 설정정보 변경 가능

spring cloud config 프로젝트 설정
- 의존성: spring cloud config - config server
- @EnableConfigServer
- yml 설정
  spring.cloud.config.server.git.uri: file://path

외부 설정파일 작성 (yml)
- 로컬 저장소로 초기화
- 설정파일 작성
- add, commit

우선순위
1. application.yml
2. user-service.yml
3. user-service-dev.yml

마이크로서비스에 적용
1. 의존성 추가
 - spring-cloud-starter-config
 - spring-cloud-starter-bootstrap
   (or spring.cloud.bootstrap.enabled = true)
2. bootstrap.yml 
 - application.yml보다 높은 순위의 설정파일
 - spring-cloud-config 서비스 uri 지정
   - spring.cloud.config.uri:
 - 가져올 외부설정파일 지정
   - spring.cloud.config.name:

외부 설정파일 변경시 적용 방법
1. 외부 설정파일을 적용시킬 MSA 재기동 (X)
2. Actuator refresh
3. Spring cloud bus

Actuator refresh
- spring cloud, boot 애플리케이션을 모니터링 및 관리
1. 사용할 MSA에 의존성 추가 (Spring actuator)
  - org.springframework.boot
  - spring-boot-starter-actuator
2. WebSecurity에서 인증과정 없이 actuator에 접근 가능하도록 변경
  - antMatchers("/actuator/**").permitAll();
3. yml에 등록
  management.endpoints.web.exposure:
    include: refresh, health, beans    
4. test
  4-1 외부 설정파일 변경 (변경후 add, commit)
  4-2 적용할 MSA에서 post로 /actuator/refresh 호출
    => 호출시 응답으로 변경된 사항을 확인 가능
  4-3 설정사항이 변경되었는 지 확인  

Actuator refresh 방식
Spring cloud gateway에 spring config 설정
1. 의존성 추가1 (spring cloud config, bootstrap)
  - org.springframework.cloud
  - spring-cloud-starter-config  
  - spring-cloud-starter-bootstrap
2. 의존성 추가 (spring boot actuator)
  - org.springframework.boot
  - spring-boot-starter-actuator
3. bootstrap.yml 설정
  spring.cloud.config:
    uri: http://127.0.0.1:8888 (config server port)
    name: ecommerce (외부 설정파일 이름: name.yml)
4. application.yml actuator 설정
  management.endpoints.web.exposure:
    include: refresh, health, beans, httptrace    
  - httptrace: 클라이언트의 요청을 추적
  - HttpTraceRepository를 빈으로 등록해야 함
    - InMemoryHttpTraceRepository()를 구현체로 하도록
5. application.yml 라우팅 정보 설정
  - /user-service/actuator/**  
  - GET, POST 모두 라우팅 처리   

여러 환경의 외부 설정파일 적용하기
ex) 
ecommerce-dev.yml, ecommerce-uat.yml, ecommerce-prod.yml       
첫 번째 user-service는 ecommerce-dev.yml을 설정파일로 사용
두 번째 user-service는 ecommerce-prod.yml을 설정파일로 사용
1. 외부 설정파일 추가 생성
  - ecommerce.yml
    - token.secret: token_default
  - ecommerce-dev.yml
    - token.secret: token_dev
  - ecommerce-prod.yml
    - token.secret: token_prod
  => add, commit
2. MSA의 bootstrap.yml 설정 (dev사용)
  spring.cloud.profiles:
    active: dev      
3. API gateway의 bootstrap.yml 설정 (prod사용)
  spring.cloud.profiles:
    active: prod    
=> Run/Debug Configurations에서 Active profiles설정 가능
=> 외부 설정파일을 구성할 때 네이밍 전략에 따르는 듯 함

remote repository의 설정파일을 사용하는 경우
1. config-service의 application.yml 수정
  - local repository를 사용하는 경우 local repository의
    파일 경로가 지정되어 있음 (file 프로토콜 사용)
  - uri를 remote repository의 주소로 변경 
  - private repository로 설정한 경우
    - username과 password를 설정해야 함

Native File Repository
- 기존 파일 시스템에 외부 설정파일 저장 (git 사용 X)
1. config-server의 application.yml 수정
  spring.application.profiles.active: native
  spring.cloud.config.server.native:
    search-location: file://path                    
===============================================
Spring Cloud Bus
- MSA를 경량 메시지 브로커와 연결
  메시지 브로커: RabbitMQ
- 상태 등의 변경을 연결된 노드에 전달 (Broadcast)  

AMQP (Advanced Message Queuing Protocol)
- 메시지 지향 미들웨어를 위한 프로토콜
- Erlang, RabbitMQ에서 사용

Kafka
- 오픈 소스 메시지 브로커 프로젝트
- 분산형 스트리밍 플랫폼 지원
- 대용량 데이터 처리가 가능한 메시징 시스템

RabbitMQ vs. Kafka
1. RabbitMQ
 - 메시지 브로커
 - 초당 20개 메시지를 소비자에게 전달
 - 브로커, 소비자 중심
2. Kafka
 - 초당 100,000 이상의 이벤트 처리 가능
 - Publisher와 Subscriber로 구분
 - Ack를 기다리지 않고 전달 가능
   => Sub가 데이터를 받았는지 못받았는지 신경쓰지 않고 Pub는 
      데이터를 전달 가능
 - 생산자 중심 

RabbitMQ 터미널 실행
- rabbitmq-server
- id/pw : guest
- port : 15672

 Dependency
 - spring-cloud-starter-actuator
 - spring-cloud-starter-config
 - spring-cloud-starter-bus-amqp
 - spring-cloud-starter-bootstrap
 
프로젝트 구조
- config server, apigateway, MSA 모두 RabbitMQ서버에 연결되어 
   있는 구조
- 기존에 actuator refresh를 사용하는 경우 모든 서비스의 구성정보를
  갱신하고자 한다면 개별로 refresh를 호출했어야 했다.
- RabbitMQ를 사용하는 경우 broadcast방식으로 한 개 서비스 변경시
  해당 변경 정보를 RabbitMQ에 등록된 모든 MSA에 브로드캐스팅시켜
  적용 가능하다.   
===============================================
설정 정보 암호화

대칭키를 이용한 암호화
1. config servie에 의존성 추가
  - spring-cloud-starter-bootstrap
2. bootstrap.yml 설정
  - encrypt.key: key (대칭키의 키 값)
  => config server의 encrpyt엔드 포인트로 암호화하고자 하는
     값을 post로 요청시 암호화된 결과를 응답받음
  => POST 127.0.0.1:8888/encrpyt
3. user-service의 h2 database연결 설정정보를 외부 설정파일로 구성
  - password부분을 암호화 할 것임
  - '{encrpyt}암호화된 패스워드'
  - {enctpy}를 붙여서 암호화된 패스워드임을 알려줘야 함

비대칭키를 이용한 암호화
- JDK keytools  
keytool 
 -genkeypair : 키 쌍 생성
 -alias : 병칭
 -keyalg : 암호화 알고리즘
 -dname : 서명정보 
   -CN
   -OU
   -O 
   -L (location)
   -C (country)
 -keypass : keystore의 패스워드
 -keystore : alias.jks
 -storepass 

1. 키 생성
keytool -genkeypair -alias apiEncKey -keyalg RSA -dname "CN=dhkim, OU=API Development, O=test.co.kr, L=Seoul, C=KR" -keypass "test123" -keystore apiEncKey.jks -storepass "test123"

2. 키 확인 (비밀키)
keytool -list -keystore apiEncKey.jks -v

3. 인증서 추출
keytool -export -alias apiEncKey -keystore apiEncKey.jks -rfc -file trustServer.cer

4. 추출된 인증서를 jks파일로
keytool -import -alias trustServer -file trustServer.cer -keystore publicKey.jks

5. 키 확인 (공개키)
keytool -list -keystore publicKey.jks -v
===============================================
Rest Template (MSA 호출)

- RestTemplate을 빈으로 등록
- 사용할 곳에서 RestTemplate DI

restTemplate.exchange
  (url, HttpMethod, requestEntity, responseEntity);
- url
  => url은 구성파일에 등록하여 사용하도록
  => Environment.getProperty를 통해 접근
- reponseEntity
  => new ParameterizedTypeReference<T>()  

RestTemplate 주요 메서드
- getForObject => GET 요청 후 객체로 결과를 반환
- getForEntity => GET 요청 후 결과는 ResponseEntity로 반환
- postForLocation => POST 요청 후 헤더에 지정된 URI로 반환

catolog 데이터
- product_id: c001
- product_name: product1
- stock: 50
- price: 2000

RestTemplate를 이용하여 다른 MSA API호출시 주소 간단화
- 변경 전: 127.0.0.1:8000/order-service/%s/orders
- 변경 후: order-service/order-service/%s/orders
  =>  API Gateway의 uri가 아닌 MSA의 이름으로 접근
  - RestTemplate을 빈으로 등록하는 부분에서 @LoadBalanced
    어노테이션을 추가
  - 구성정보의 api 호출 uri를 변경  
===============================================
Feign Client (MSA 호출)
- Spring CLoud Netflix의 라이브러리

설정 
1. 의존성
 - spring-cloud-starter-openfeign
2. 어노테이션
 - @EnableFeignClients (main클래스)
3. 인터페이스 구성
 - @FeignClient(name="MSA이름")
   => name=호출하고자 하는 MSA의 이름
@GetMapping("/msa/{id}/api")    
ResponseEntity getSomething(@PathVariable Long id);
4. api를 호출할 곳에서 생성한 인터페이스를 주입받아 사용
  => 메서드 호출하듯이!

=> RestTemplate에 비해 코드량이 많이 줄었음

FeignClient사용시 발생한 로그 추적
1. application.yml
loggin:
  level:
    com.package: DEBUG
  => feignclient 인터페이스가 정의된 path    
2. 빈 등록 Logger.Level
 - 리턴 타입: Logger.Level
 - 리턴 value: Logger.Level.FULL

FeignClient 예외처리
1. try-catch 방식
  - 실제 FeignClient를 호출하는 부분에서 예외처리
  - FeignException
ex) 예제 프로젝트에 적용시
  1. user-service에서 order-service를 호출하였음
  2. FeignClient인 order-service를 호출하는 과정에서 에러가 발생하였다면?
    => 아예 에러가 터져 user-service까지 반환되지 않는 경우
    => order-service 부분만 예외처리되고 user-service는
       조회되는 경우
  3. 두 번째 경우를 위해 FeignClient호출시 예외처리
ex)
try{
  orders = orderServiceFeignClient.getOrders(userId);
} catch (FeignException e) {
  log.error(e.getMessage());
}

ErrorDecoder (FeignClient 예외처리)
1. ErrorDecoder를 구현하는 클래스 생성
2. decode 메서드 구현
  2-1 response.statue를 switch의 값으로
  2-2 400, 404 등 예외 case 설정
  2-3 methodKey.contains("methodName")
      => 해당하는 에러코드에 대해 FeignClient별로 식별하여
         처리 가능
  2-4 new ResponseStatusException(HttpStatus.valueOf(response.status(), "error message");)
      => 예외 객체 구성
  2-5 switch의 default는 new Exceptuon(response.reason());
3. 작성한 ErrorDecoder클래스를 빈으로 등록 or @Component
4. try-catch방식을 사용하지 않고 그냥 feign client를 호출
Tip.
- 에러 메시지 같은 것은 설정파일에서 관리하는 것도 좋음
===============================================
데이터 동기화 문제

동기화 문제 발생 상황 예)
- 2개 order-service가 구동
  => 현재 h2 내장 DB를 사용하기 때문에 각각 DB가 할당된 상태
- user-service에서 order를 2개 등록시 부하분산을 통해 
  각각 order-service의 DB에 한 개씩 order데이터가 저장
  => 동기문제 발생

해결 1
- 하나의 DB를 사용하도록 수정
- 물리적으로 분산되어 있는 인스턴스를 한 개 DB로 관리한다면
  트랜잭션 관리, 동시성 관리 등이 필요

해결 2
- 인스턴스마다의 DB 간 동기화
- Message Queuing Server 사용 
- 한 인스턴스에서 발생한 DB의 변화를 큐잉서버에 전달
- 큐잉서버를 구독하는 다른 인스턴스는 변화에 대한 메시지를 수신  

해결 3
- 하나의 DB, 메시지 큐잉 서버 모두 사용
- 각 인스턴스와 한 개 DB사이에 메시지 큐잉 서버가 위치
  => 큐잉 서버를 통해 동시성 문제 등을 해결
===============================================
Kafka (데이터 동기화)

https://kafka.apache.org/
Apache Kafaka
- 메시지 브로커 프로젝트
- 브로커: 메시지를 주고받을 때 사용되는 서버
  => 일반적으로 3개 이상의 브로커를 권장
  => n개 이상의 브로커 중 1대니는 Controller 기능을 수행
- Zookeeper: 브로커를 제어하는 역할

kafka install
- version: kafka_2.13-2.7.0.tgz
  => tar xvf kafka_2.13-2.7.0.tgz






































 